/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import com.toedter.calendar.JDateChooser;
import controller.GestionController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import maps.ColoredWaypointRenderer;
import maps.MapaSeleccionDestino;
import maps.MapaSeleccionOrigen;
import maps.ColoredWaypointRenderer;
import maps.CustomPainter;
import maps.PolylinePainter;
import maps.CompositePainter;
import maps.MapViaje;
import model.Viaje;

import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.viewer.GeoPosition;
import org.jxmapviewer.viewer.Waypoint;
import org.jxmapviewer.viewer.DefaultWaypoint;
import org.jxmapviewer.viewer.WaypointPainter;
import org.jxmapviewer.viewer.DefaultTileFactory;
import org.jxmapviewer.viewer.TileFactoryInfo;
import org.jxmapviewer.painter.AbstractPainter;
import org.jxmapviewer.input.PanKeyListener;
import org.jxmapviewer.input.PanMouseInputListener;
import org.jxmapviewer.input.ZoomMouseWheelListenerCenter;
/**
 *
 * @author bryge
 */
public class GestionViajesApp extends javax.swing.JFrame {
    GestionController opciones = new GestionController();
    private DefaultTableModel dtm;
    private Object[] datos = new Object[10];
    private int filaSelec;
    private TableRowSorter trsfiltro;
    String filtro;
    
    
    /**
     * mapa
     */
    private JXMapViewer mapViewer;
    private Set<Waypoint> waypointsOrigen;
    private Set<Waypoint> waypointsDestino;
    private WaypointPainter<Waypoint> waypointPainterOrigen;
    private WaypointPainter<Waypoint> waypointPainterDestino;
    private PolylinePainter polylinePainter;
    
    
    
    /**
     * Creates new form GestionViajesApp
     */
    public GestionViajesApp() {
        initComponents();
       jComboBox1.setEnabled(false);
       DefaultComboBoxModel<String> estados = new DefaultComboBoxModel<>();
       estados.addElement("Registrado");
       estados.addElement("En proceso");
       estados.addElement("Finalizado");
       jComboBox1.setModel(estados);
       abrirMapa.setEnabled(false);
        dtm = (DefaultTableModel)tblViajes.getModel(); 
        
        
        /*setResizable(false);
        
        // Opcional: puedes establecer un tamaño fijo utilizando setSize
        setSize(1200, 800);*/
        setLocationRelativeTo(null);
        //setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    }
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // Método para inicializar el estado de los botones
    private void inicializarBotones() {
    agregar.setEnabled(true);
    eliminar.setEnabled(true);
    editar.setEnabled(true);
    modificar.setEnabled(false);
    limpiar.setEnabled(true);
    jComboBox1.setEnabled(false);
    jComboBox1.setSelectedIndex(0);
    abrirMapa.setEnabled(false);
}
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblViajes = new javax.swing.JTable();
        eliminar = new javax.swing.JButton();
        filtrar = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        origen = new javax.swing.JTextField();
        lblOrigen = new javax.swing.JLabel();
        destino = new javax.swing.JTextField();
        lblDestino = new javax.swing.JLabel();
        lblFecIni = new javax.swing.JLabel();
        lblFecFin = new javax.swing.JLabel();
        ubiOrigen = new javax.swing.JButton();
        agregar = new javax.swing.JButton();
        ubiDestino = new javax.swing.JButton();
        lblOrigen1 = new javax.swing.JLabel();
        latitudOrigen = new javax.swing.JTextField();
        latitudDestino = new javax.swing.JTextField();
        lblOrigen2 = new javax.swing.JLabel();
        lblOrigen3 = new javax.swing.JLabel();
        lblOrigen4 = new javax.swing.JLabel();
        longitudOrigen = new javax.swing.JTextField();
        lblOrigen5 = new javax.swing.JLabel();
        longitudDestino = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        editar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        abrirMapa = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        abreDirectorio = new javax.swing.JMenuItem();
        exportar = new javax.swing.JMenuItem();
        salir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(720, 797));
        setResizable(false);

        tblViajes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Origen", "Destino", "Fecha de Inicio", "Fecha de Fin", "Estado", "Lat. Or.", "Lon. Or", "Lat. Des.", "Long. Des"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblViajes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblViajesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblViajes);
        if (tblViajes.getColumnModel().getColumnCount() > 0) {
            tblViajes.getColumnModel().getColumn(0).setResizable(false);
            tblViajes.getColumnModel().getColumn(0).setPreferredWidth(5);
            tblViajes.getColumnModel().getColumn(1).setResizable(false);
            tblViajes.getColumnModel().getColumn(3).setPreferredWidth(15);
            tblViajes.getColumnModel().getColumn(4).setResizable(false);
            tblViajes.getColumnModel().getColumn(4).setPreferredWidth(15);
            tblViajes.getColumnModel().getColumn(5).setResizable(false);
            tblViajes.getColumnModel().getColumn(5).setPreferredWidth(35);
            tblViajes.getColumnModel().getColumn(6).setResizable(false);
            tblViajes.getColumnModel().getColumn(6).setPreferredWidth(1);
            tblViajes.getColumnModel().getColumn(7).setResizable(false);
            tblViajes.getColumnModel().getColumn(7).setPreferredWidth(1);
            tblViajes.getColumnModel().getColumn(8).setResizable(false);
            tblViajes.getColumnModel().getColumn(8).setPreferredWidth(1);
            tblViajes.getColumnModel().getColumn(9).setResizable(false);
            tblViajes.getColumnModel().getColumn(9).setPreferredWidth(1);
        }

        eliminar.setText("Eliminar");
        eliminar.setActionCommand("AgregarViaje");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        filtrar.setText("Filtrar");
        filtrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarActionPerformed(evt);
            }
        });

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gestión de viajes");

        origen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        origen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                origenActionPerformed(evt);
            }
        });
        origen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                origenKeyTyped(evt);
            }
        });

        lblOrigen.setText("Origen");

        destino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        destino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinoActionPerformed(evt);
            }
        });
        destino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                destinoKeyTyped(evt);
            }
        });

        lblDestino.setText("Destino");

        lblFecIni.setText("Fecha de salida");

        lblFecFin.setText("Fecha de llegada");

        ubiOrigen.setText("Seleccionar Ubicación de Origen");
        ubiOrigen.setActionCommand("AgregarViaje");
        ubiOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ubiOrigenActionPerformed(evt);
            }
        });

        agregar.setText("Agregar");
        agregar.setActionCommand("AgregarViaje");
        agregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                agregarMouseClicked(evt);
            }
        });
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        ubiDestino.setText("Seleccionar Ubicación de Destino");
        ubiDestino.setActionCommand("AgregarViaje");
        ubiDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ubiDestinoActionPerformed(evt);
            }
        });

        lblOrigen1.setText("Latitud Origen");

        latitudOrigen.setEditable(false);
        latitudOrigen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        latitudOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latitudOrigenActionPerformed(evt);
            }
        });

        latitudDestino.setEditable(false);
        latitudDestino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        latitudDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latitudDestinoActionPerformed(evt);
            }
        });

        lblOrigen2.setText("Latitud Destino");

        lblOrigen3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOrigen3.setText("Coordenadas de las ubicaciones");

        lblOrigen4.setText("Longitud Origen");

        longitudOrigen.setEditable(false);
        longitudOrigen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        longitudOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longitudOrigenActionPerformed(evt);
            }
        });

        lblOrigen5.setText("Longitud Destino");

        longitudDestino.setEditable(false);
        longitudDestino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        longitudDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longitudDestinoActionPerformed(evt);
            }
        });

        editar.setText("Editar");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        modificar.setText("Modificar");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        jLabel3.setText("Estado");

        jLabel4.setText("Ver ruta en mapa");

        abrirMapa.setText("Abrir Mapa");
        abrirMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMapaActionPerformed(evt);
            }
        });

        jMenu2.setText("Opciones");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        abreDirectorio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        abreDirectorio.setText("Abrir directorio de CSV");
        abreDirectorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abreDirectorioActionPerformed(evt);
            }
        });
        jMenu2.add(abreDirectorio);

        exportar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exportar.setText("Exportar en CSV");
        exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarActionPerformed(evt);
            }
        });
        jMenu2.add(exportar);

        salir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        jMenu2.add(salir);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblOrigen3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(longitudOrigen, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrigen4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(latitudOrigen, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ubiOrigen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(origen, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrigen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblOrigen1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(destino)
                                    .addComponent(lblDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ubiDestino, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(latitudDestino)
                                    .addComponent(lblOrigen2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(longitudDestino)
                                    .addComponent(lblOrigen5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblFecIni, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFecFin, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(abrirMapa, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(10, 10, 10))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filtrar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOrigen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(origen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDestino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ubiOrigen)
                    .addComponent(ubiDestino))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblOrigen3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOrigen1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(latitudOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOrigen2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(latitudDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOrigen4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(longitudOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOrigen5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(longitudDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblFecIni)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblFecFin)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(abrirMapa))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eliminar)
                    .addComponent(filtrar)
                    .addComponent(limpiar)
                    .addComponent(agregar)
                    .addComponent(editar)
                    .addComponent(modificar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(103, 103, 103))
        );

        destino.getAccessibleContext().setAccessibleDescription("Ingrese aquí el nombre de la ubicación de destino.");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
   
        if (tblViajes.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "No ha seleccionado un registro de la tabla", "ERROR AL ELIMINAR REGISTRO", JOptionPane.ERROR_MESSAGE);
            
        }else{
          dtm.removeRow(tblViajes.getSelectedRow());  
        }
    }//GEN-LAST:event_eliminarActionPerformed

    private void filtrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarActionPerformed
                jComboBox1.setEnabled(true);
                filtro(); 
                tblViajes.setRowSorter(trsfiltro); 
                agregar.setEnabled(false); 
            
            
        
    }//GEN-LAST:event_filtrarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        LimpiarCampos();
        inicializarBotones();
    }//GEN-LAST:event_limpiarActionPerformed

    private void origenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_origenActionPerformed
         destino.requestFocus();
    }//GEN-LAST:event_origenActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(
            this, 
            "¿Está seguro que desea salir de la aplicación?", 
            "Saliendo...", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE
        );

        if (respuesta == JOptionPane.YES_OPTION) {
            // Si se selecciona "Sí", termina la aplicación
            System.exit(0);
        }
    }//GEN-LAST:event_salirActionPerformed

    private void destinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinoActionPerformed
        
    }//GEN-LAST:event_destinoActionPerformed

    private void ubiOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ubiOrigenActionPerformed
        // TODO add your handling code here:
        MapaSeleccionOrigen mapaSeleccionOrigen = new MapaSeleccionOrigen(GestionViajesApp.this);
        mapaSeleccionOrigen.setVisible(true);
    }//GEN-LAST:event_ubiOrigenActionPerformed

    private int id = 1;
    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        
         if (!camposvacios()){      
             
        datos [0] = id ++;
        datos [1] = origen.getText().trim();
        datos [2] = destino.getText().trim();
        if(jDateChooser1.getDate()!=null){
            datos [3] = jDateChooser1.getDate().toString();
        }
        if(jDateChooser2.getDate()!= null){
        datos [4] = jDateChooser2.getDate().toString();
        }
        datos [5] = "Registrado";
        datos [6] = Double.valueOf(latitudOrigen.getText().trim());
        datos [7] = Double.valueOf(longitudOrigen.getText().trim());
        datos [8] = Double.valueOf(latitudDestino.getText().trim());
        datos [9] = Double.valueOf(longitudDestino.getText().trim());
        dtm.addRow(datos);
        LimpiarCampos();
         }
         
    }//GEN-LAST:event_agregarActionPerformed
    
private void LimpiarCampos() {
    origen.setText("");
    destino.setText("");
    trsfiltro.setRowFilter(null);
    origen.requestFocus();
    jDateChooser1.setDate(null);
    jDateChooser2.setDate(null);
    latitudOrigen.setText("");
    longitudOrigen.setText("");
    latitudDestino.setText("");
    longitudDestino.setText("");
}

    
    public void setUbicacion(boolean esOrigen, GeoPosition geoPosition) {
    if (esOrigen) {
        latitudOrigen.setText(String.valueOf(geoPosition.getLatitude()));
        longitudOrigen.setText(String.valueOf(geoPosition.getLongitude()));
    } else {
        latitudDestino.setText(String.valueOf(geoPosition.getLatitude()));
        longitudDestino.setText(String.valueOf(geoPosition.getLongitude()));
    }
    }
    
private boolean camposvacios() {
    if (origen.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "El Campo Origen está vacío", "Verificar Campos", JOptionPane.ERROR_MESSAGE);
        origen.requestFocus();
        return true;
    } else if (destino.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "El Campo Destino está vacío", "Verificar Campos", JOptionPane.ERROR_MESSAGE);
        destino.requestFocus();
        return true;
    }
    return false;
}

    
    
    
  /*  
private List<Viaje> getViajesFromTable() {
    List<Viaje> viajes = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) tblViajes.getModel();
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); // El formato de fecha que quieres usar
    
    for (int i = 0; i < model.getRowCount(); i++) {
        Viaje viaje = new Viaje();
        viaje.setIdViaje((Integer) model.getValueAt(i, 0));
        viaje.setOrigen((String) model.getValueAt(i, 1));
        viaje.setDestino((String) model.getValueAt(i, 2));
        
        // Manejar fechas
        Object fechaSalidaObj = model.getValueAt(i, 3);
        Object fechaLlegadaObj = model.getValueAt(i, 4);
        
        if (fechaSalidaObj instanceof Date) {
            viaje.setFechaSalida((Date) fechaSalidaObj);
        }
        if (fechaLlegadaObj instanceof Date) {
            viaje.setFechaLlegada((Date) fechaLlegadaObj);
        }

            viaje.setLatitudOrigen(Double.valueOf((String) model.getValueAt(i, 6)));
            viaje.setLongitudOrigen(Double.valueOf((String) model.getValueAt(i, 7)));
            viaje.setLatitudDestino(Double.valueOf((String) model.getValueAt(i, 8)));
            viaje.setLongitudDestino(Double.valueOf((String) model.getValueAt(i, 9)));
        
        viajes.add(viaje);
    }
    
    return viajes;
}*/
private List<Viaje> getViajesFromTable() {
    List<Viaje> viajes = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) tblViajes.getModel();
    
    for (int i = 0; i < model.getRowCount(); i++) {
        Viaje viaje = new Viaje();
        viaje.setIdViaje((Integer) model.getValueAt(i, 0));
        viaje.setOrigen((String) model.getValueAt(i, 1));
        viaje.setDestino((String) model.getValueAt(i, 2));
        viaje.setEstado((String) model.getValueAt(i, 5));

        // Manejar fechas
        Object fechaSalidaObj = model.getValueAt(i, 3);
        Object fechaLlegadaObj = model.getValueAt(i, 4);
        if (fechaSalidaObj instanceof Date) {
            viaje.setFechaSalida((Date) fechaSalidaObj);
            System.out.println(viaje.getFechaSalida());
        }
        if (fechaLlegadaObj instanceof Date) {
            viaje.setFechaLlegada((Date) fechaLlegadaObj);
        }

        
        viajes.add(viaje);
    }
    
    return viajes;
}


        
    private void ubiDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ubiDestinoActionPerformed
        // TODO add your handling code here:
        MapaSeleccionDestino mapaSeleccionDestino = new MapaSeleccionDestino(GestionViajesApp.this);
        mapaSeleccionDestino.setVisible(true);
    }//GEN-LAST:event_ubiDestinoActionPerformed

    private void latitudOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latitudOrigenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_latitudOrigenActionPerformed

    private void latitudDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latitudDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_latitudDestinoActionPerformed

    private void exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarActionPerformed
        GestionController gestionController = new GestionController();
    List<Viaje> listaViajes = getViajesFromTable();        
    // Obtener la fecha y hora actual
        LocalDateTime fechaActual = LocalDateTime.now();
        // Crear un DateTimeFormatter con el formato deseado
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
        // Formatear la fecha
        String fechaexport = fechaActual.format(formato);
        gestionController.exportarViajesACSV(listaViajes,"viajes-"+fechaexport+".csv");
        
/*
    String nombreArchivo = "viajes_exportados.csv"; // Puedes permitir al usuario elegir el nombre del archivo
    gestionController.exportarViajesACSV(nombreArchivo, listaViajes);*/
    }//GEN-LAST:event_exportarActionPerformed

    private void longitudOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longitudOrigenActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_longitudOrigenActionPerformed

    private void longitudDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longitudDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_longitudDestinoActionPerformed

    private void abreDirectorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abreDirectorioActionPerformed
        opciones.abreDirectorio();
    }//GEN-LAST:event_abreDirectorioActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        jComboBox1.setEnabled(true);
        
        if (tblViajes.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "No ha seleccionado un registro de la tabla", "ERROR AL MODIFICAR REGISTRO", JOptionPane.WARNING_MESSAGE);
            
        }else{
         filaSelec = tblViajes.getSelectedRow();
        
        origen.setText(tblViajes.getValueAt(filaSelec, 1).toString());

        destino.setText(tblViajes.getValueAt(filaSelec, 2).toString());
       // jDateChooser1(tblViajes.getValueAt(filaSelec, 3));
        //fecFin.setText(tblViajes.getValueAt(filaSelec, 4).toString());

        destino.setText(tblViajes.getValueAt(filaSelec, 2).toString()); 
        //fecIni.setText(tblViajes.getValueAt(filaSelec, 3).toString());
        //fecFin.setText(tblViajes.getValueAt(filaSelec, 4).toString());

        
         // Deshabilita los botones Agregar y Eliminar
        agregar.setEnabled(false);
        eliminar.setEnabled(false);
        
        // Habilita los botones Modificar y Limpiar
        modificar.setEnabled(true);
        limpiar.setEnabled(true);
        
        System.out.println("Fila: " + filaSelec);  
        }
         
    }//GEN-LAST:event_editarActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
      
      //jComboBox1.setEnabled(true);
       if (!camposvacios()){      
             
       dtm.setValueAt(origen.getText().trim(), filaSelec, 1);
       dtm.setValueAt(destino.getText().trim(), filaSelec, 2);
       if(jDateChooser1.getDate()!=null){
           dtm.setValueAt(jDateChooser1.getDate().toString(),filaSelec,3);
       }
       if(jDateChooser2.getDate()!=null){
        dtm.setValueAt(jDateChooser2.getDate().toString(),filaSelec,4);
       }
       dtm.setValueAt(jComboBox1.getSelectedItem().toString(),filaSelec,5);
                    
        
        LimpiarCampos();
        inicializarBotones();
         } 
       
    }//GEN-LAST:event_modificarActionPerformed

    private void origenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_origenKeyTyped
        trsfiltro = new TableRowSorter(tblViajes.getModel());
        tblViajes.setRowSorter(trsfiltro);
    }//GEN-LAST:event_origenKeyTyped


    private void tblViajesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblViajesMouseClicked
//        // TODO add your handling code here:
//int s = tblViajes.rowAtPoint(evt.getPoint());
//    origen.setText(String.valueOf(tblViajes.getValueAt(s, 1)));
//    destino.setText(String.valueOf(tblViajes.getValueAt(s, 2)));
//    String dateString = String.valueOf(tblViajes.getValueAt(s, 3));
//    String dateString1 = String.valueOf(tblViajes.getValueAt(s, 4));
//    String estado = String.valueOf(tblViajes.getValueAt(s, 5));
//    String latitudO = String.valueOf(tblViajes.getValueAt(s, 6));
//    String longitudO = String.valueOf(tblViajes.getValueAt(s, 7));
//    String latitudD = String.valueOf(tblViajes.getValueAt(s, 8));
//    String longitudD = String.valueOf(tblViajes.getValueAt(s, 9));
//    
//    ComboBoxModel<String> status = jComboBox1.getModel();
//    for (int i = 0; i < status.getSize(); i++) {
//        if (status.getElementAt(i).equals(estado)) {
//            jComboBox1.setSelectedIndex(i);
//            break;
//        }
//    }
//    
//    SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy", java.util.Locale.ENGLISH);
//    try {
//        Date date = formatter.parse(dateString);
//        Date date1 = formatter.parse(dateString1);
//        if(date!= null){
//            jDateChooser1.setDate(date);
//        }
//        if(date1!= null){
//            jDateChooser2.setDate(date);
//        }
//        jDateChooser2.setDate(date1);
//        latitudOrigen.setText(latitudO);
//        longitudOrigen.setText(longitudO);
//        latitudDestino.setText(latitudD);
//        longitudDestino.setText(longitudD);
//    } catch (ParseException e) {
//        System.out.println("Error al analizar la fecha: " + e.getMessage());
//    }

// Obtener la fila seleccionada
    abrirMapa.setEnabled(true);
    int rowIndex = tblViajes.rowAtPoint(evt.getPoint());

    // Validar índice de fila
    if (rowIndex < 0) {
        return; // Salir si la fila seleccionada no es válida
    }

    // Obtener los valores de la fila
    String origenText = String.valueOf(tblViajes.getValueAt(rowIndex, 1));
    String destinoText = String.valueOf(tblViajes.getValueAt(rowIndex, 2));
    String dateString = String.valueOf(tblViajes.getValueAt(rowIndex, 3));
    String dateString1 = String.valueOf(tblViajes.getValueAt(rowIndex, 4));
    String estado = String.valueOf(tblViajes.getValueAt(rowIndex, 5));
    String latitudO = String.valueOf(tblViajes.getValueAt(rowIndex, 6));
    String longitudO = String.valueOf(tblViajes.getValueAt(rowIndex, 7));
    String latitudD = String.valueOf(tblViajes.getValueAt(rowIndex, 8));
    String longitudD = String.valueOf(tblViajes.getValueAt(rowIndex, 9));

    // Actualizar campos de texto
    origen.setText(origenText);
    destino.setText(destinoText);
    latitudOrigen.setText(latitudO);
    longitudOrigen.setText(longitudO);
    latitudDestino.setText(latitudD);
    longitudDestino.setText(longitudD);

    // Actualizar JComboBox
    updateComboBox(estado);

    // Configurar formato de fecha
    SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy", java.util.Locale.ENGLISH);

    // Parsear fechas y actualizar JDateChooser
    updateDateChooser(jDateChooser1, dateString, formatter);
    updateDateChooser(jDateChooser2, dateString1, formatter);
    }//GEN-LAST:event_tblViajesMouseClicked
  
    // Método auxiliar para actualizar el JComboBox
private void updateComboBox(String estado) {
    ComboBoxModel<String> status = jComboBox1.getModel();
    for (int i = 0; i < status.getSize(); i++) {
        if (status.getElementAt(i).equals(estado)) {
            jComboBox1.setSelectedIndex(i);
            break;
        }
    }
}

// Método auxiliar para actualizar el JDateChooser
private void updateDateChooser(JDateChooser dateChooser, String dateString, SimpleDateFormat formatter) {
    try {
        Date date = formatter.parse(dateString);
        dateChooser.setDate(date);
    } catch (ParseException e) {
        System.out.println("Error al analizar la fecha: " + e.getMessage());
    }
}
    
    
    
    
    /*public void filtro(){
        filtro = origen.getText();
        trsfiltro.setRowFilter(RowFilter.regexFilter(origen.getText(), 1));
    }*/
    
    private void destinoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_destinoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_destinoKeyTyped

    
    private void agregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agregarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_agregarMouseClicked

    private void abrirMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMapaActionPerformed
        // TODO add your handling code here:.
        /*GeoPosition initialPosition = new GeoPosition(14.641804550935518, -90.51326751708984); // Posición inicial
        int zoomLevel = 4; // Nivel de zoom inicial
        new MapViaje(initialPosition, zoomLevel);*/
                Double latOrigen = Double.valueOf(latitudOrigen.getText().trim());
        Double longOrigen = Double.valueOf(longitudOrigen.getText().trim());
        Double latDestino = Double.valueOf(latitudDestino.getText().trim());
        Double longDestino= Double.valueOf(longitudDestino.getText().trim());
        // Dentro de GestionViajesApp, en el método que maneja la selección de viaje:
        GeoPosition origen = new GeoPosition(latOrigen, longOrigen);
        GeoPosition destino = new GeoPosition(latDestino, longDestino);

        // Crea y muestra el nuevo JFrame con el mapa
        new MapViaje(origen, destino, 10);
    }//GEN-LAST:event_abrirMapaActionPerformed
  
    public void filtro() {
    // Creamos una lista de RowFilters para almacenar todos los filtros
    List<RowFilter<Object, Object>> filtros = new ArrayList<>();

    if (!origen.getText().trim().isEmpty()) {
        filtros.add(RowFilter.regexFilter("(?i)" + origen.getText(), 1)); 
    }

    if (!destino.getText().trim().isEmpty()) {
        filtros.add(RowFilter.regexFilter("(?i)" + destino.getText(), 2)); 

    }
    
    
    
    if (jDateChooser1.getDate() != null && !jDateChooser1.getDate().toString().trim().isEmpty()){
        filtros.add(RowFilter.regexFilter("(?i)" + jDateChooser1.getDate(), 3)); 
    }
    
     if (jDateChooser2.getDate() != null && !jDateChooser2.getDate().toString().trim().isEmpty()){
        filtros.add(RowFilter.regexFilter("(?i)" + jDateChooser2.getDate(), 4)); 
        System.out.println("Fc2: "+jDateChooser2.getDate().toString());
    }
    
    if(!jComboBox1.getSelectedItem().toString().trim().isEmpty()){
    filtros.add(RowFilter.regexFilter("(?i)" + jComboBox1.getSelectedItem(), 5));
    }
    
/*
    if (!fecIni.getText().trim().isEmpty()) {
        filtros.add(RowFilter.regexFilter("(?i)" + fecIni.getText(), 3)); 
    }

    if (!fecFin.getText().trim().isEmpty()) {
        filtros.add(RowFilter.regexFilter("(?i)" + fecFin.getText(), 4)); 
    }*/

    if (filtros.isEmpty()) {
        trsfiltro.setRowFilter(null); // Si no hay filtros, se muestran todos los registros
    } else {
        trsfiltro.setRowFilter(RowFilter.andFilter(filtros)); // Aplica los filtros combinados
    }
}
    private void updateMap(GeoPosition origen, GeoPosition destino) {
    // Limpiar y actualizar waypoints
    waypointsOrigen.clear();
    waypointsDestino.clear();
    waypointsOrigen.add(new DefaultWaypoint(origen));
    waypointsDestino.add(new DefaultWaypoint(destino));

    // Configurar pintores
    ColoredWaypointRenderer origenRenderer = new ColoredWaypointRenderer(Color.RED);
    ColoredWaypointRenderer destinoRenderer = new ColoredWaypointRenderer(Color.BLUE);
    waypointPainterOrigen.setWaypoints(waypointsOrigen);
    waypointPainterOrigen.setRenderer(origenRenderer);
    waypointPainterDestino.setWaypoints(waypointsDestino);
    waypointPainterDestino.setRenderer(destinoRenderer);

    // Configurar PolylinePainter
    polylinePainter.setWaypoints(List.of(origen, destino));
    polylinePainter.setLineColor(Color.GREEN);
    polylinePainter.setLineWidth(3);

    // Crear CompositePainter y asignar al mapa
    CompositePainter<JXMapViewer> compositePainter = new CompositePainter<>(List.of(
        waypointPainterOrigen,
        waypointPainterDestino,
        polylinePainter
    ));
    mapViewer.setOverlayPainter(compositePainter);

    // Calcular y ajustar el punto medio y el zoom
    double midLatitude = (origen.getLatitude() + destino.getLatitude()) / 2;
    double midLongitude = (origen.getLongitude() + destino.getLongitude()) / 2;
    GeoPosition midpoint = new GeoPosition(midLatitude, midLongitude);
    System.out.println("Mid"+midpoint);
    mapViewer.setAddressLocation(midpoint);

    double maxLat = Math.max(origen.getLatitude(), destino.getLatitude());
    double minLat = Math.min(origen.getLatitude(), destino.getLatitude());
    double maxLon = Math.max(origen.getLongitude(), destino.getLongitude());
    double minLon = Math.min(origen.getLongitude(), destino.getLongitude());

    double latDiff = maxLat - minLat;
    double lonDiff = maxLon - minLon;
    int zoom = calcularZoom(latDiff, lonDiff);
    mapViewer.setZoom(zoom);

    // Deshabilitar interacciones del usuario
//    disableUserInteractions();

    // Asegúrate de repintar el mapa
    mapViewer.repaint();
}

    
    private int calcularZoom(double latDiff, double lonDiff) {
        // Determinar el nivel de zoom basado en la diferencia en grados
        if (latDiff > 5 || lonDiff > 5) {
            return 10; // Zoom bajo para distancias mayores
        } else if (latDiff > 2 || lonDiff > 2) {
            return 7; // Zoom medio para distancias intermedias
        } else {
            return 4; // Zoom alto para distancias menores
        }
    }
    

    
    /*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionViajesApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionViajesApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionViajesApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionViajesApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionViajesApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abreDirectorio;
    private javax.swing.JButton abrirMapa;
    private javax.swing.JButton agregar;
    private javax.swing.JTextField destino;
    private javax.swing.JButton editar;
    private javax.swing.JButton eliminar;
    private javax.swing.JMenuItem exportar;
    private javax.swing.JButton filtrar;
    private javax.swing.JComboBox jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField latitudDestino;
    private javax.swing.JTextField latitudOrigen;
    private javax.swing.JLabel lblDestino;
    private javax.swing.JLabel lblFecFin;
    private javax.swing.JLabel lblFecIni;
    private javax.swing.JLabel lblOrigen;
    private javax.swing.JLabel lblOrigen1;
    private javax.swing.JLabel lblOrigen2;
    private javax.swing.JLabel lblOrigen3;
    private javax.swing.JLabel lblOrigen4;
    private javax.swing.JLabel lblOrigen5;
    private javax.swing.JButton limpiar;
    private javax.swing.JTextField longitudDestino;
    private javax.swing.JTextField longitudOrigen;
    private javax.swing.JButton modificar;
    private javax.swing.JTextField origen;
    private javax.swing.JMenuItem salir;
    private javax.swing.JTable tblViajes;
    private javax.swing.JButton ubiDestino;
    private javax.swing.JButton ubiOrigen;
    // End of variables declaration//GEN-END:variables
}
