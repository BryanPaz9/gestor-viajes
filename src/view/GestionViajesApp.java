/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import com.toedter.calendar.JDateChooser;
import controller.GestionController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import maps.ColoredWaypointRenderer;
import maps.MapaSeleccionDestino;
import maps.MapaSeleccionOrigen;
import maps.ColoredWaypointRenderer;
import maps.CustomPainter;
import maps.PolylinePainter;
import maps.CompositePainter;
import maps.MapViaje;
import model.Viaje;
import db.Conexion;
import static db.Conexion.getConnection;
import java.sql.*;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.viewer.GeoPosition;
import org.jxmapviewer.viewer.Waypoint;
import org.jxmapviewer.viewer.DefaultWaypoint;
import org.jxmapviewer.viewer.WaypointPainter;
import org.jxmapviewer.viewer.DefaultTileFactory;
import org.jxmapviewer.viewer.TileFactoryInfo;
import org.jxmapviewer.painter.AbstractPainter;
import org.jxmapviewer.input.PanKeyListener;
import org.jxmapviewer.input.PanMouseInputListener;
import org.jxmapviewer.input.ZoomMouseWheelListenerCenter;
/**
 *
 * @author bryge
 */
public class GestionViajesApp extends javax.swing.JFrame {
    GestionController opciones = new GestionController();
    private DefaultTableModel dtm;
    private Object[] datos = new Object[10];
    private int filaSelec;
    private TableRowSorter trsfiltro;
    String filtro;
    
    
    /**
     * mapa
     */
    private JXMapViewer mapViewer;
    private Set<Waypoint> waypointsOrigen;
    private Set<Waypoint> waypointsDestino;
    private WaypointPainter<Waypoint> waypointPainterOrigen;
    private WaypointPainter<Waypoint> waypointPainterDestino;
    private PolylinePainter polylinePainter;
    
    
    
    /**
     * Creates new form GestionViajesApp
     */
    public GestionViajesApp() {
        initComponents();
       jComboBox1.setEnabled(false);
       DefaultComboBoxModel<String> estados = new DefaultComboBoxModel<>();
       estados.addElement("");
       estados.addElement("Rechazado");
       estados.addElement("Solicitado");
       estados.addElement("Aprobado");
       estados.addElement("En proceso");
       estados.addElement("Finalizado");
       jComboBox1.setModel(estados);
       abrirMapa.setEnabled(false);
       refreshTable();
        //dtm = (DefaultTableModel)tblViajes.getModel(); 
        
        
        /*setResizable(false);
        
        // Opcional: puedes establecer un tamaño fijo utilizando setSize
        */setSize(1300, 1000);
        setLocationRelativeTo(null);
        //setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    }
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // Método para inicializar el estado de los botones
    private void inicializarBotones() {
    aprobar.setEnabled(true);
    denegar.setEnabled(true);
    limpiar.setEnabled(true);
    jComboBox1.setEnabled(false);
    jComboBox1.setSelectedIndex(0);
    abrirMapa.setEnabled(false);
}
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblViajes = new javax.swing.JTable();
        denegar = new javax.swing.JButton();
        filtrar = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        origen = new javax.swing.JTextField();
        lblOrigen = new javax.swing.JLabel();
        destino = new javax.swing.JTextField();
        lblDestino = new javax.swing.JLabel();
        lblFecIni = new javax.swing.JLabel();
        lblFecFin = new javax.swing.JLabel();
        aprobar = new javax.swing.JButton();
        lblOrigen1 = new javax.swing.JLabel();
        latitudOrigen = new javax.swing.JTextField();
        latitudDestino = new javax.swing.JTextField();
        lblOrigen2 = new javax.swing.JLabel();
        lblOrigen3 = new javax.swing.JLabel();
        lblOrigen4 = new javax.swing.JLabel();
        longitudOrigen = new javax.swing.JTextField();
        lblOrigen5 = new javax.swing.JLabel();
        longitudDestino = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        abrirMapa = new javax.swing.JButton();
        txtCodigoViaje = new javax.swing.JTextField();
        lblOrigen6 = new javax.swing.JLabel();
        txtSolicitante = new javax.swing.JTextField();
        lblOrigen7 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        lblOrigen8 = new javax.swing.JLabel();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        lblFecFin1 = new javax.swing.JLabel();
        lblOrigen9 = new javax.swing.JLabel();
        precio = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        vehiculo = new javax.swing.JComboBox();
        lblOrigen10 = new javax.swing.JLabel();
        txtDistancia = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        viajes_mes = new javax.swing.JMenuItem();
        vehiculo_viajes = new javax.swing.JMenuItem();
        cliente_viajes = new javax.swing.JMenuItem();
        ganancias_mes = new javax.swing.JMenuItem();
        vehiculo_recorrido = new javax.swing.JMenuItem();
        exportar = new javax.swing.JMenuItem();
        abreDirectorio = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        crud_clientes = new javax.swing.JMenuItem();
        crud_vehiculos = new javax.swing.JMenuItem();
        crud_usuarios = new javax.swing.JMenuItem();
        ubicaciones = new javax.swing.JMenuItem();
        salir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(720, 797));
        setResizable(false);

        tblViajes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Origen", "Destino", "Fecha de Inicio", "Fecha de Fin", "Estado", "Lat. Or.", "Lon. Or", "Lat. Des.", "Long. Des"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblViajes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblViajesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblViajes);
        if (tblViajes.getColumnModel().getColumnCount() > 0) {
            tblViajes.getColumnModel().getColumn(0).setResizable(false);
            tblViajes.getColumnModel().getColumn(0).setPreferredWidth(5);
            tblViajes.getColumnModel().getColumn(1).setResizable(false);
            tblViajes.getColumnModel().getColumn(3).setPreferredWidth(15);
            tblViajes.getColumnModel().getColumn(4).setResizable(false);
            tblViajes.getColumnModel().getColumn(4).setPreferredWidth(15);
            tblViajes.getColumnModel().getColumn(5).setResizable(false);
            tblViajes.getColumnModel().getColumn(5).setPreferredWidth(35);
            tblViajes.getColumnModel().getColumn(6).setResizable(false);
            tblViajes.getColumnModel().getColumn(6).setPreferredWidth(1);
            tblViajes.getColumnModel().getColumn(7).setResizable(false);
            tblViajes.getColumnModel().getColumn(7).setPreferredWidth(1);
            tblViajes.getColumnModel().getColumn(8).setResizable(false);
            tblViajes.getColumnModel().getColumn(8).setPreferredWidth(1);
            tblViajes.getColumnModel().getColumn(9).setResizable(false);
            tblViajes.getColumnModel().getColumn(9).setPreferredWidth(1);
        }

        denegar.setText("Denegar");
        denegar.setActionCommand("DenegarViaje");
        denegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denegarActionPerformed(evt);
            }
        });

        filtrar.setText("Filtrar");
        filtrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarActionPerformed(evt);
            }
        });

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gestión de viajes");

        origen.setEditable(false);
        origen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        origen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                origenActionPerformed(evt);
            }
        });
        origen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                origenKeyTyped(evt);
            }
        });

        lblOrigen.setText("Origen");

        destino.setEditable(false);
        destino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        destino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinoActionPerformed(evt);
            }
        });
        destino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                destinoKeyTyped(evt);
            }
        });

        lblDestino.setText("Destino");

        lblFecIni.setText("Fecha de salida");

        lblFecFin.setText("Fecha de llegada");

        aprobar.setText("Aprobar");
        aprobar.setActionCommand("AprobarViaje");
        aprobar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aprobarMouseClicked(evt);
            }
        });
        aprobar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aprobarActionPerformed(evt);
            }
        });

        lblOrigen1.setText("Latitud Origen");

        latitudOrigen.setEditable(false);
        latitudOrigen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        latitudOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latitudOrigenActionPerformed(evt);
            }
        });

        latitudDestino.setEditable(false);
        latitudDestino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        latitudDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latitudDestinoActionPerformed(evt);
            }
        });

        lblOrigen2.setText("Latitud Destino");

        lblOrigen3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOrigen3.setText("Coordenadas de las ubicaciones");

        lblOrigen4.setText("Longitud Origen");

        longitudOrigen.setEditable(false);
        longitudOrigen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        longitudOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longitudOrigenActionPerformed(evt);
            }
        });

        lblOrigen5.setText("Longitud Destino");

        longitudDestino.setEditable(false);
        longitudDestino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        longitudDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longitudDestinoActionPerformed(evt);
            }
        });

        jLabel3.setText("Estado");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Ver ruta en mapa");

        abrirMapa.setText("Abrir Mapa");
        abrirMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMapaActionPerformed(evt);
            }
        });

        txtCodigoViaje.setEditable(false);
        txtCodigoViaje.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        txtCodigoViaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoViajeActionPerformed(evt);
            }
        });

        lblOrigen6.setText("Código de viaje");

        txtSolicitante.setEditable(false);
        txtSolicitante.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        txtSolicitante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSolicitanteActionPerformed(evt);
            }
        });

        lblOrigen7.setText("Solicitante");

        txtCliente.setEditable(false);
        txtCliente.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        txtCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteActionPerformed(evt);
            }
        });

        lblOrigen8.setText("Cliente");

        jDateChooser3.setEnabled(false);

        lblFecFin1.setText("Fecha de solicitud");

        lblOrigen9.setText("Precio");

        precio.setEditable(false);
        precio.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        precio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioActionPerformed(evt);
            }
        });

        jLabel5.setText("Vehículo");

        vehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehiculoActionPerformed(evt);
            }
        });

        lblOrigen10.setText("Distancia");

        txtDistancia.setEditable(false);
        txtDistancia.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        txtDistancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDistanciaActionPerformed(evt);
            }
        });

        jMenu2.setText("Opciones");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenu1.setText("Reportes");

        viajes_mes.setText("Viajes en mes");
        viajes_mes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viajes_mesActionPerformed(evt);
            }
        });
        jMenu1.add(viajes_mes);

        vehiculo_viajes.setText("Vehiculo con mas viajes");
        vehiculo_viajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehiculo_viajesActionPerformed(evt);
            }
        });
        jMenu1.add(vehiculo_viajes);

        cliente_viajes.setText("Cliente con mas viajes");
        cliente_viajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cliente_viajesActionPerformed(evt);
            }
        });
        jMenu1.add(cliente_viajes);

        ganancias_mes.setText("Ganancias en el mes");
        ganancias_mes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ganancias_mesActionPerformed(evt);
            }
        });
        jMenu1.add(ganancias_mes);

        vehiculo_recorrido.setText("Vehículo con más recorrido");
        vehiculo_recorrido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehiculo_recorridoActionPerformed(evt);
            }
        });
        jMenu1.add(vehiculo_recorrido);

        exportar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exportar.setText("Exportar tabla en CSV");
        exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarActionPerformed(evt);
            }
        });
        jMenu1.add(exportar);

        abreDirectorio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        abreDirectorio.setText("Abrir directorio de CSV");
        abreDirectorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abreDirectorioActionPerformed(evt);
            }
        });
        jMenu1.add(abreDirectorio);

        jMenu2.add(jMenu1);

        jMenu3.setText("Mantenimientos");

        crud_clientes.setText("Clientes");
        crud_clientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crud_clientesActionPerformed(evt);
            }
        });
        jMenu3.add(crud_clientes);

        crud_vehiculos.setText("Vehiculos");
        jMenu3.add(crud_vehiculos);

        crud_usuarios.setText("Usuarios");
        jMenu3.add(crud_usuarios);

        ubicaciones.setText("Ubicaciones");
        ubicaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ubicacionesActionPerformed(evt);
            }
        });
        jMenu3.add(ubicaciones);

        jMenu2.add(jMenu3);

        salir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        jMenu2.add(salir);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(abrirMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(571, 571, 571))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1018, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(aprobar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(denegar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filtrar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(402, 402, 402))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrigen6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtCodigoViaje, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrigen8, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOrigen7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(vehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblFecIni, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblFecFin, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                    .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFecFin1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOrigen9, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblOrigen10, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(latitudOrigen, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrigen1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(origen, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblOrigen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                                        .addGap(61, 61, 61)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(longitudOrigen, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblOrigen4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(61, 61, 61)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(latitudDestino)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblOrigen2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 31, Short.MAX_VALUE)))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(longitudDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOrigen5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(lblOrigen3, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(350, 350, 350))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOrigen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(origen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDestino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addComponent(lblOrigen3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOrigen2)
                            .addComponent(lblOrigen5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(latitudDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(longitudDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblOrigen4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(longitudOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblOrigen1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(latitudOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(abrirMapa)
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFecFin1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFecIni)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFecFin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrigen9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOrigen7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOrigen6)
                            .addComponent(lblOrigen8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodigoViaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblOrigen10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(denegar)
                    .addComponent(filtrar)
                    .addComponent(limpiar)
                    .addComponent(aprobar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        destino.getAccessibleContext().setAccessibleDescription("Ingrese aquí el nombre de la ubicación de destino.");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void denegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denegarActionPerformed
   
        if (tblViajes.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "No ha seleccionado un registro de la tabla", "ERROR AL ELIMINAR REGISTRO", JOptionPane.ERROR_MESSAGE);
            
        }else{
          dtm.removeRow(tblViajes.getSelectedRow());  
        }
    }//GEN-LAST:event_denegarActionPerformed

    private void filtrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarActionPerformed
                jComboBox1.setEnabled(true);
                filtro(); 
                tblViajes.setRowSorter(trsfiltro); 
                aprobar.setEnabled(false); 
            
            
        
    }//GEN-LAST:event_filtrarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        LimpiarCampos();
        inicializarBotones();
    }//GEN-LAST:event_limpiarActionPerformed

    private void origenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_origenActionPerformed
         destino.requestFocus();
    }//GEN-LAST:event_origenActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(
            this, 
            "¿Está seguro que desea salir de la aplicación?", 
            "Saliendo...", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE
        );

        if (respuesta == JOptionPane.YES_OPTION) {
            // Si se selecciona "Sí", termina la aplicación
            System.exit(0);
        }
    }//GEN-LAST:event_salirActionPerformed

    private void destinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinoActionPerformed
        
    }//GEN-LAST:event_destinoActionPerformed

    private int id = 1;
    private void aprobarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aprobarActionPerformed
        
         if (!camposvacios()){      
             
        datos [0] = id ++;
        datos [1] = origen.getText().trim();
        datos [2] = destino.getText().trim();
        if(jDateChooser1.getDate()!=null){
            datos [3] = jDateChooser1.getDate().toString();
        }
        if(jDateChooser2.getDate()!= null){
        datos [4] = jDateChooser2.getDate().toString();
        }
        datos [5] = "Registrado";
        datos [6] = Double.valueOf(latitudOrigen.getText().trim());
        datos [7] = Double.valueOf(longitudOrigen.getText().trim());
        datos [8] = Double.valueOf(latitudDestino.getText().trim());
        datos [9] = Double.valueOf(longitudDestino.getText().trim());
        dtm.addRow(datos);
        LimpiarCampos();
         }
         
    }//GEN-LAST:event_aprobarActionPerformed
    
private void LimpiarCampos() {
    origen.setText("");
    destino.setText("");
    origen.requestFocus();
    destino.requestFocus();
    jDateChooser1.setDate(null);
    jDateChooser2.setDate(null);
    jDateChooser3.setDate(null);
    latitudOrigen.setText("");
    longitudOrigen.setText("");
    latitudDestino.setText("");
    longitudDestino.setText("");
    txtSolicitante.setText("");
    txtCliente.setText("");
    txtDistancia.setText("");
    txtCodigoViaje.setText("");
    jComboBox1.setSelectedIndex(0);
    
    
}

    
    public void setUbicacion(boolean esOrigen, GeoPosition geoPosition) {
    if (esOrigen) {
        latitudOrigen.setText(String.valueOf(geoPosition.getLatitude()));
        longitudOrigen.setText(String.valueOf(geoPosition.getLongitude()));
    } else {
        latitudDestino.setText(String.valueOf(geoPosition.getLatitude()));
        longitudDestino.setText(String.valueOf(geoPosition.getLongitude()));
    }
    }
    
private boolean camposvacios() {
    if (origen.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "El Campo Origen está vacío", "Verificar Campos", JOptionPane.ERROR_MESSAGE);
        origen.requestFocus();
        return true;
    } else if (destino.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "El Campo Destino está vacío", "Verificar Campos", JOptionPane.ERROR_MESSAGE);
        destino.requestFocus();
        return true;
    }
    return false;
}

    
    
private List<Viaje> getViajesFromTable() {
    List<Viaje> viajes = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) tblViajes.getModel();
    
    for (int i = 0; i < model.getRowCount(); i++) {
        Viaje viaje = new Viaje();
        viaje.setIdViaje((Integer) model.getValueAt(i, 0));
        viaje.setOrigen((String) model.getValueAt(i, 1));
        viaje.setDestino((String) model.getValueAt(i, 2));
        viaje.setEstado((String) model.getValueAt(i, 5));

        // Manejar fechas
        Object fechaSalidaObj = model.getValueAt(i, 3);
        Object fechaLlegadaObj = model.getValueAt(i, 4);
        if (fechaSalidaObj instanceof Date) {
            viaje.setFechaSalida((Date) fechaSalidaObj);
            System.out.println(viaje.getFechaSalida());
        }
        if (fechaLlegadaObj instanceof Date) {
            viaje.setFechaLlegada((Date) fechaLlegadaObj);
        }

        
        viajes.add(viaje);
    }
    
    return viajes;
}

public void refreshTable() {
        // Configuración de las columnas de la tabla
        String[] columnNames = {"Cod. viaje", "Solicitante","Cliente","Vehiculo","Costo","Origen","Destino","Distancia","Fecha de salida","Fecha de llegada","Fecha de solicitud","Estado","Latitud Origen","Longitud Origen","Latidud Destino", "Longitud Destino"};
        dtm = new DefaultTableModel(columnNames, 0); // Se inicializa el modelo de tabla
        tblViajes.setModel(dtm);  // Se asigna el modelo a la tabla

        // Consulta a DB
        try (Connection con = getConnection()) {  // getConnection() es tu método que devuelve la conexión a la DB
            String query = "SELECT CODIGO_VIAJE,USU.NOMBRE || ' ' || USU.APELLIDO AS SOLICITANTE, " +
            "CLI.NOMBRE AS CLIENTE,FK_PLACA,COSTO,ORI.NOMBRE AS ORIGEN,DES.NOMBRE AS DESTINO,DISTANCIA,FECHA_SALIDA,FECHA_LLEGADA,ESTADO,FECHA_REGISTRO, "+ 
            "ORI.LATITUD AS OLAT,ORI.LONGITUD AS OLON,DES.LATITUD AS DLAT,DES.LONGITUD AS DLON " +
            "FROM VIAJES " +
            "JOIN USUARIOS USU ON FK_CODIGO_USUARIO = USU.CODIGO_USUARIO " +
            "JOIN CLIENTES CLI ON FK_NIT = CLI.NIT " +
            "JOIN UBICACIONES ORI ON ORIGEN = ORI.CODIGO_UBICACION " +
            "JOIN UBICACIONES DES ON DESTINO = DES.CODIGO_UBICACION";
            PreparedStatement ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            // Se recorre con un while el result del query
            while (rs.next()) {
                String codViaje = rs.getString("CODIGO_VIAJE");
                String solicitante = rs.getString("SOLICITANTE");
                String cliente = rs.getString("CLIENTE");
                String vehiculo = rs.getString("FK_PLACA");
                String costo = rs.getString("COSTO");
                String origen = rs.getString("ORIGEN");
                String destino = rs.getString("DESTINO");
                String distancia = rs.getString("DISTANCIA");
                String fecha_salida = rs.getString("FECHA_SALIDA");
                String fecha_llegada = rs.getString("FECHA_LLEGADA");
                String estado = rs.getString("ESTADO");
                switch (estado){
                case "0":
                    estado = "Rechazado";
                break;
                case "1":
                    estado = "Solicitado";
                break;
                case "2":
                    estado = "Aprobado";
                break;
                case "3":
                    estado = "En proceso";
                break;
                case "4":
                    estado = "Finalizado";
                break;
                default:
                    JOptionPane.showMessageDialog(null, "Estado incorrecto, verificar DB");
                break;
                }
                String fecha_registro = rs.getString("FECHA_REGISTRO");
                String oLatitud = rs.getString("OLAT");
                String oLongitud = rs.getString("OLON");
                String dLatitud = rs.getString("DLAT");
                String dLongitud = rs.getString("DLON");
                
                // Se cargan los datos del objeto a la tabla
                dtm.addRow(new Object[]{codViaje, solicitante,cliente,vehiculo,costo,origen,destino,distancia,fecha_salida,fecha_llegada,fecha_registro,estado,oLatitud,oLongitud,dLatitud,dLongitud});
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
        
    private void latitudOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latitudOrigenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_latitudOrigenActionPerformed

    private void latitudDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latitudDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_latitudDestinoActionPerformed

    private void exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarActionPerformed
        GestionController gestionController = new GestionController();
    List<Viaje> listaViajes = getViajesFromTable();        
    // Obtener la fecha y hora actual
        LocalDateTime fechaActual = LocalDateTime.now();
        // Crear un DateTimeFormatter con el formato deseado
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
        // Formatear la fecha
        String fechaexport = fechaActual.format(formato);
        gestionController.exportarViajesACSV(listaViajes,"viajes-"+fechaexport+".csv");
        
/*
    String nombreArchivo = "viajes_exportados.csv"; // Puedes permitir al usuario elegir el nombre del archivo
    gestionController.exportarViajesACSV(nombreArchivo, listaViajes);*/
    }//GEN-LAST:event_exportarActionPerformed

    private void longitudOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longitudOrigenActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_longitudOrigenActionPerformed

    private void longitudDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longitudDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_longitudDestinoActionPerformed

    private void abreDirectorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abreDirectorioActionPerformed
        opciones.abreDirectorio();
    }//GEN-LAST:event_abreDirectorioActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void origenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_origenKeyTyped
        trsfiltro = new TableRowSorter(tblViajes.getModel());
        tblViajes.setRowSorter(trsfiltro);
    }//GEN-LAST:event_origenKeyTyped


    private void tblViajesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblViajesMouseClicked

// Obtener la fila seleccionada
    abrirMapa.setEnabled(true);
    int rowIndex = tblViajes.rowAtPoint(evt.getPoint());

    // Validar índice de fila
    if (rowIndex < 0) {
        return; // Salir si la fila seleccionada no es válida
    }

    // Obtener los valores de la fila
    String origenText = String.valueOf(tblViajes.getValueAt(rowIndex, 5));
    String destinoText = String.valueOf(tblViajes.getValueAt(rowIndex, 6));
    String dateString = String.valueOf(tblViajes.getValueAt(rowIndex, 9));
    String dateString1 = String.valueOf(tblViajes.getValueAt(rowIndex, 10));
    String estado = String.valueOf(tblViajes.getValueAt(rowIndex, 11));
    String latitudO = String.valueOf(tblViajes.getValueAt(rowIndex, 12));
    String longitudO = String.valueOf(tblViajes.getValueAt(rowIndex, 13));
    String latitudD = String.valueOf(tblViajes.getValueAt(rowIndex, 14));
    String longitudD = String.valueOf(tblViajes.getValueAt(rowIndex, 15));
    String dist = String.valueOf(tblViajes.getValueAt(rowIndex, 7));
    String vehiculo = String.valueOf(tblViajes.getValueAt(rowIndex,3));
    String cliente = String.valueOf(tblViajes.getValueAt(rowIndex, 2));
    String solicitante = String.valueOf(tblViajes.getValueAt(rowIndex, 1));
    String codigoViaje = String.valueOf(tblViajes.getValueAt(rowIndex,0));
    String fechaRegistro = String.valueOf(tblViajes.getValueAt(rowIndex, 9));
    

    // Actualizar campos de texto
    origen.setText(origenText);
    destino.setText(destinoText);
    latitudOrigen.setText(latitudO);
    longitudOrigen.setText(longitudO);
    latitudDestino.setText(latitudD);
    longitudDestino.setText(longitudD);
    txtDistancia.setText(dist);
    txtCliente.setText(cliente);
    txtSolicitante.setText(solicitante);
    txtCodigoViaje.setText(codigoViaje);

    // Actualizar JComboBox
    updateComboBox(estado);

    // Configurar formato de fecha
    //SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM dd", java.util.Locale.ENGLISH);
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", java.util.Locale.ENGLISH);

    
    // Parsear fechas y actualizar JDateChooser
    updateDateChooser(jDateChooser1, dateString, formatter);
    updateDateChooser(jDateChooser2, dateString1, formatter);
    updateDateChooser(jDateChooser3,fechaRegistro,formatter);
    }//GEN-LAST:event_tblViajesMouseClicked

    // Método auxiliar para actualizar el JComboBox
    private void updateComboBox(String estado) {
        ComboBoxModel<String> status = jComboBox1.getModel();
        for (int i = 0; i < status.getSize(); i++) {
            if (status.getElementAt(i).equals(estado)) {
                jComboBox1.setSelectedIndex(i);
                break;
            }
        }
    }
    private void validarSituacion(String estado){
        switch (estado){
            case "Rechazado":
                break;
            case "Solicitado":
                break;
            case "Aprobado":
                break;
            case "En proceso":
                break;
            case "Finalizado":
                break;
            default:
                JOptionPane.showMessageDialog(null, "Estado incorrecto, verifique la DB.");
                break;
        }
    }

// Método auxiliar para actualizar el JDateChooser
private void updateDateChooser(JDateChooser dateChooser, String dateString, SimpleDateFormat formatter) {
    try {
        Date date = formatter.parse(dateString);
        dateChooser.setDate(date);
    } catch (ParseException e) {
        System.out.println("Error al analizar la fecha: " + e.getMessage());
    }
}
    
    
    
    
    /*public void filtro(){
        filtro = origen.getText();
        trsfiltro.setRowFilter(RowFilter.regexFilter(origen.getText(), 1));
    }*/
    
    private void destinoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_destinoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_destinoKeyTyped

    
    private void aprobarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aprobarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_aprobarMouseClicked

    private void abrirMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMapaActionPerformed
        // TODO add your handling code here:.
        /*GeoPosition initialPosition = new GeoPosition(14.641804550935518, -90.51326751708984); // Posición inicial
        int zoomLevel = 4; // Nivel de zoom inicial
        new MapViaje(initialPosition, zoomLevel);*/
                Double latOrigen = Double.valueOf(latitudOrigen.getText().trim());
        Double longOrigen = Double.valueOf(longitudOrigen.getText().trim());
        Double latDestino = Double.valueOf(latitudDestino.getText().trim());
        Double longDestino= Double.valueOf(longitudDestino.getText().trim());
        // Dentro de GestionViajesApp, en el método que maneja la selección de viaje:
        GeoPosition origen = new GeoPosition(latOrigen, longOrigen);
        GeoPosition destino = new GeoPosition(latDestino, longDestino);

        // Crea y muestra el nuevo JFrame con el mapa
        new MapViaje(origen, destino, 10);
    }//GEN-LAST:event_abrirMapaActionPerformed

    private void viajes_mesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viajes_mesActionPerformed
        // TODO add your handling code here:
        JPanel panel = new JPanel();
        // Crear los JComboBox para mes y año
        String[] meses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", 
                          "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
        JComboBox<String> comboMes = new JComboBox<>(meses);

        Integer[] anios = new Integer[3]; // Crear un rango de años (por ejemplo, 50 años a partir de 2000)
        int yearStart = 2023;
        for (int i = 0; i < anios.length; i++) {
            anios[i] = yearStart + i;
        }
        JComboBox<Integer> comboAno = new JComboBox<>(anios);

            // Añadir los JComboBox al panel
        panel.add(new JLabel("Mes:"));
        panel.add(comboMes);
        panel.add(new JLabel("Año:"));
        panel.add(comboAno);
        
        int result = JOptionPane.showConfirmDialog(null, panel, "Seleccionar Mes y Año para ver viajes", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            // Obtener los valores seleccionados
            String mesSeleccionado = (String) comboMes.getSelectedItem();
            Integer anoSeleccionado = (Integer) comboAno.getSelectedItem();
            System.out.println("Mes seleccionado: " + mesSeleccionado);
            System.out.println("Año seleccionado: " + anoSeleccionado);
            String mes = "";
            String anio = String.valueOf(anoSeleccionado);
            switch(mesSeleccionado){
                case "Enero":
                mes = "01";
                break;
                case "Febrero":
                mes = "02";
                break;
                case "Marzo":
                mes = "03";
                break;
                case "Abril":
                mes = "04";
                break;     
                case "Mayo":
                mes= "05";
                break;
                case "Junio":
                mes = "06";
                break;
                case "Julio":
                mes = "07";
                break;
                case "Agosto":
                mes = "08";
                break;     
                case "Septiembre":
                mes = "09";
                break;
                case "Octubre":
                mes = "10";
                break;
                case "Noviembre":
                mes = "11";
                break;
                case "Diciembre":
                mes = "12";
                break;                     
            }

            opciones.viajes_por_mes(mes, anio);
        }
    }//GEN-LAST:event_viajes_mesActionPerformed

    private void vehiculo_viajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehiculo_viajesActionPerformed
        // TODO add your handling code here:
        String viajes_vehiculo = opciones.vehiculo_cantidad_viajes();
        JOptionPane.showMessageDialog(null, viajes_vehiculo,"Vehiculo con mayor cantidad de viajes",  JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_vehiculo_viajesActionPerformed

    private void cliente_viajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cliente_viajesActionPerformed
        // TODO add your handling code here:
        String cliente = opciones.cliente_cantidad_solicitudes();
        JOptionPane.showMessageDialog(null, cliente, "Cliente con mayor cantidad de solicitudes", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cliente_viajesActionPerformed

    private void ganancias_mesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ganancias_mesActionPerformed
        // TODO add your handling code here:
        JPanel panel = new JPanel();
        // Crear los JComboBox para mes y año
        String[] meses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", 
                          "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
        JComboBox<String> comboMes = new JComboBox<>(meses);

        Integer[] anios = new Integer[3]; // Crear un rango de años (por ejemplo, 50 años a partir de 2000)
        int yearStart = 2023;
        for (int i = 0; i < anios.length; i++) {
            anios[i] = yearStart + i;
        }
        JComboBox<Integer> comboAno = new JComboBox<>(anios);

            // Añadir los JComboBox al panel
        panel.add(new JLabel("Mes:"));
        panel.add(comboMes);
        panel.add(new JLabel("Año:"));
        panel.add(comboAno);
        
        int result = JOptionPane.showConfirmDialog(null, panel, "Seleccionar Mes y Año para ver ganancias", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            // Obtener los valores seleccionados
            String mesSeleccionado = (String) comboMes.getSelectedItem();
            Integer anoSeleccionado = (Integer) comboAno.getSelectedItem();
            System.out.println("Mes seleccionado: " + mesSeleccionado);
            System.out.println("Año seleccionado: " + anoSeleccionado);
            String mes = "";
            String anio = String.valueOf(anoSeleccionado);
            switch(mesSeleccionado){
                case "Enero":
                mes = "01";
                break;
                case "Febrero":
                mes = "02";
                break;
                case "Marzo":
                mes = "03";
                break;
                case "Abril":
                mes = "04";
                break;     
                case "Mayo":
                mes= "05";
                break;
                case "Junio":
                mes = "06";
                break;
                case "Julio":
                mes = "07";
                break;
                case "Agosto":
                mes = "08";
                break;     
                case "Septiembre":
                mes = "09";
                break;
                case "Octubre":
                mes = "10";
                break;
                case "Noviembre":
                mes = "11";
                break;
                case "Diciembre":
                mes = "12";
                break;                     
            }

            String ganancias = opciones.ganancias_mes(mes, anio);
            if(ganancias == null){
                JOptionPane.showMessageDialog(null, "No se encontraron datos de ganancias del mes seleccionado", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Ganancias durante el mes de "+mesSeleccionado+" de "+anoSeleccionado+" :\n"+"Q "+ganancias,"Ganancias del mes", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_ganancias_mesActionPerformed

    private void vehiculo_recorridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehiculo_recorridoActionPerformed
        // TODO add your handling code here:
        String vehiculo = opciones.vehiculo_recorrido();
        JOptionPane.showMessageDialog(null, vehiculo, "Vehiculo con myor recorrido", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_vehiculo_recorridoActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void txtCodigoViajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoViajeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoViajeActionPerformed

    private void txtSolicitanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSolicitanteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSolicitanteActionPerformed

    private void txtClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteActionPerformed

    private void precioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precioActionPerformed

    private void vehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehiculoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vehiculoActionPerformed

    private void txtDistanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDistanciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDistanciaActionPerformed

    private void crud_clientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crud_clientesActionPerformed
        // TODO add your handling code here:
        VClientes vc = new VClientes();
        vc.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_crud_clientesActionPerformed

    private void ubicacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ubicacionesActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        VUbicaciones vu = new VUbicaciones();
        vu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ubicacionesActionPerformed
  
    public void filtro() {
    // Creamos una lista de RowFilters para almacenar todos los filtros
    List<RowFilter<Object, Object>> filtros = new ArrayList<>();

    if (!origen.getText().trim().isEmpty()) {
        filtros.add(RowFilter.regexFilter("(?i)" + origen.getText(), 1)); 
    }

    if (!destino.getText().trim().isEmpty()) {
        filtros.add(RowFilter.regexFilter("(?i)" + destino.getText(), 2)); 

    }
    
    
    
    if (jDateChooser1.getDate() != null && !jDateChooser1.getDate().toString().trim().isEmpty()){
        filtros.add(RowFilter.regexFilter("(?i)" + jDateChooser1.getDate(), 3)); 
    }
    
     if (jDateChooser2.getDate() != null && !jDateChooser2.getDate().toString().trim().isEmpty()){
        filtros.add(RowFilter.regexFilter("(?i)" + jDateChooser2.getDate(), 4)); 
        System.out.println("Fc2: "+jDateChooser2.getDate().toString());
    }
    
    if(!jComboBox1.getSelectedItem().toString().trim().isEmpty()){
    filtros.add(RowFilter.regexFilter("(?i)" + jComboBox1.getSelectedItem(), 5));
    }
    
/*
    if (!fecIni.getText().trim().isEmpty()) {
        filtros.add(RowFilter.regexFilter("(?i)" + fecIni.getText(), 3)); 
    }

    if (!fecFin.getText().trim().isEmpty()) {
        filtros.add(RowFilter.regexFilter("(?i)" + fecFin.getText(), 4)); 
    }*/

    if (filtros.isEmpty()) {
        trsfiltro.setRowFilter(null); // Si no hay filtros, se muestran todos los registros
    } else {
        trsfiltro.setRowFilter(RowFilter.andFilter(filtros)); // Aplica los filtros combinados
    }
}
    private void updateMap(GeoPosition origen, GeoPosition destino) {
    // Limpiar y actualizar waypoints
    waypointsOrigen.clear();
    waypointsDestino.clear();
    waypointsOrigen.add(new DefaultWaypoint(origen));
    waypointsDestino.add(new DefaultWaypoint(destino));

    // Configurar pintores
    ColoredWaypointRenderer origenRenderer = new ColoredWaypointRenderer(Color.RED);
    ColoredWaypointRenderer destinoRenderer = new ColoredWaypointRenderer(Color.BLUE);
    waypointPainterOrigen.setWaypoints(waypointsOrigen);
    waypointPainterOrigen.setRenderer(origenRenderer);
    waypointPainterDestino.setWaypoints(waypointsDestino);
    waypointPainterDestino.setRenderer(destinoRenderer);

    // Configurar PolylinePainter
    polylinePainter.setWaypoints(List.of(origen, destino));
    polylinePainter.setLineColor(Color.GREEN);
    polylinePainter.setLineWidth(3);

    // Crear CompositePainter y asignar al mapa
    CompositePainter<JXMapViewer> compositePainter = new CompositePainter<>(List.of(
        waypointPainterOrigen,
        waypointPainterDestino,
        polylinePainter
    ));
    mapViewer.setOverlayPainter(compositePainter);

    // Calcular y ajustar el punto medio y el zoom
    double midLatitude = (origen.getLatitude() + destino.getLatitude()) / 2;
    double midLongitude = (origen.getLongitude() + destino.getLongitude()) / 2;
    GeoPosition midpoint = new GeoPosition(midLatitude, midLongitude);
    System.out.println("Mid"+midpoint);
    mapViewer.setAddressLocation(midpoint);

    double maxLat = Math.max(origen.getLatitude(), destino.getLatitude());
    double minLat = Math.min(origen.getLatitude(), destino.getLatitude());
    double maxLon = Math.max(origen.getLongitude(), destino.getLongitude());
    double minLon = Math.min(origen.getLongitude(), destino.getLongitude());

    double latDiff = maxLat - minLat;
    double lonDiff = maxLon - minLon;
    int zoom = calcularZoom(latDiff, lonDiff);
    mapViewer.setZoom(zoom);

    // Deshabilitar interacciones del usuario
//    disableUserInteractions();

    // Asegúrate de repintar el mapa
    mapViewer.repaint();
}

    
    private int calcularZoom(double latDiff, double lonDiff) {
        // Determinar el nivel de zoom basado en la diferencia en grados
        if (latDiff > 5 || lonDiff > 5) {
            return 10; // Zoom bajo para distancias mayores
        } else if (latDiff > 2 || lonDiff > 2) {
            return 7; // Zoom medio para distancias intermedias
        } else {
            return 4; // Zoom alto para distancias menores
        }
    }
    

    
    /*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionViajesApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionViajesApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionViajesApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionViajesApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 Login princ = new Login();
                 princ.setVisible(true);
                 princ.setLocationRelativeTo(null);
                
        
        
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abreDirectorio;
    private javax.swing.JButton abrirMapa;
    private javax.swing.JButton aprobar;
    private javax.swing.JMenuItem cliente_viajes;
    private javax.swing.JMenuItem crud_clientes;
    private javax.swing.JMenuItem crud_usuarios;
    private javax.swing.JMenuItem crud_vehiculos;
    private javax.swing.JButton denegar;
    private javax.swing.JTextField destino;
    private javax.swing.JMenuItem exportar;
    private javax.swing.JButton filtrar;
    private javax.swing.JMenuItem ganancias_mes;
    private javax.swing.JComboBox jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField latitudDestino;
    private javax.swing.JTextField latitudOrigen;
    private javax.swing.JLabel lblDestino;
    private javax.swing.JLabel lblFecFin;
    private javax.swing.JLabel lblFecFin1;
    private javax.swing.JLabel lblFecIni;
    private javax.swing.JLabel lblOrigen;
    private javax.swing.JLabel lblOrigen1;
    private javax.swing.JLabel lblOrigen10;
    private javax.swing.JLabel lblOrigen2;
    private javax.swing.JLabel lblOrigen3;
    private javax.swing.JLabel lblOrigen4;
    private javax.swing.JLabel lblOrigen5;
    private javax.swing.JLabel lblOrigen6;
    private javax.swing.JLabel lblOrigen7;
    private javax.swing.JLabel lblOrigen8;
    private javax.swing.JLabel lblOrigen9;
    private javax.swing.JButton limpiar;
    private javax.swing.JTextField longitudDestino;
    private javax.swing.JTextField longitudOrigen;
    private javax.swing.JTextField origen;
    private javax.swing.JTextField precio;
    private javax.swing.JMenuItem salir;
    private javax.swing.JTable tblViajes;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCodigoViaje;
    private javax.swing.JTextField txtDistancia;
    private javax.swing.JTextField txtSolicitante;
    private javax.swing.JMenuItem ubicaciones;
    private javax.swing.JComboBox vehiculo;
    private javax.swing.JMenuItem vehiculo_recorrido;
    private javax.swing.JMenuItem vehiculo_viajes;
    private javax.swing.JMenuItem viajes_mes;
    // End of variables declaration//GEN-END:variables
}
