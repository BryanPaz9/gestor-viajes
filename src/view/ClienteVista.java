/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import com.toedter.calendar.JDateChooser;
import controller.GestionController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import maps.ColoredWaypointRenderer;
import maps.MapaSeleccionDestino;
import maps.MapaSeleccionOrigen;
import maps.ColoredWaypointRenderer;
import maps.CustomPainter;
import maps.PolylinePainter;
import maps.CompositePainter;
import maps.MapViaje;
import model.Viaje;
import db.Conexion;
import static db.Conexion.getConnection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JTextField;

import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.viewer.GeoPosition;
import org.jxmapviewer.viewer.Waypoint;
import org.jxmapviewer.viewer.DefaultWaypoint;
import org.jxmapviewer.viewer.WaypointPainter;
import org.jxmapviewer.viewer.DefaultTileFactory;
import org.jxmapviewer.viewer.TileFactoryInfo;
import org.jxmapviewer.painter.AbstractPainter;
import org.jxmapviewer.input.PanKeyListener;
import org.jxmapviewer.input.PanMouseInputListener;
import org.jxmapviewer.input.ZoomMouseWheelListenerCenter;
/**
 *
 * @author bryge
 */
public class ClienteVista extends javax.swing.JFrame {
    GestionController opciones = new GestionController();
    private DefaultTableModel dtm;
    private Object[] datos = new Object[10];
    private int filaSelec;
    private TableRowSorter trsfiltro;
    String filtro;
    
    
    /**
     * mapa
     */
    private JXMapViewer mapViewer;
    private Set<Waypoint> waypointsOrigen;
    private Set<Waypoint> waypointsDestino;
    private WaypointPainter<Waypoint> waypointPainterOrigen;
    private WaypointPainter<Waypoint> waypointPainterDestino;
    private PolylinePainter polylinePainter;
    
    
    
    /**
     * Creates new form GestionViajesApp
     */
    public ClienteVista(String usuario,String nombre ,String cliente) {
        initComponents();
       jComboBox1.setEnabled(false);
       DefaultComboBoxModel<String> estados = new DefaultComboBoxModel<>();
       estados.addElement("");
       estados.addElement("Rechazado");
       estados.addElement("Solicitado");
       estados.addElement("Aprobado");
       estados.addElement("En proceso");
       estados.addElement("Finalizado");
       jComboBox1.setModel(estados);
       txtSolicitante.setText(usuario);
       txtCliente.setText(cliente);
       nameusuario.setText(nombre);
       refreshTable(usuario);
       cargarUbicaciones();
       agregarListeners();
       
       
       
       
       
        //dtm = (DefaultTableModel)tblViajes.getModel(); 
        
        
        /*setResizable(false);
        
        // Opcional: puedes establecer un tamaño fijo utilizando setSize
        */setSize(1300, 1000);
        setLocationRelativeTo(null);
        //setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    }
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // Método para inicializar el estado de los botones
    private void inicializarBotones() {
    
    limpiar.setEnabled(true);
    jComboBox1.setEnabled(false);
    jComboBox1.setSelectedIndex(0);  
}
   
   private void cargarUbicaciones() {
    try (Connection con = Conexion.getConnection()) {
        String query = "SELECT NOMBRE FROM UBICACIONES";

        PreparedStatement ps = con.prepareStatement(query);
        ResultSet rs = ps.executeQuery();
        origen.addItem("Seleccione");
        destino.addItem("Seleccione");
        while (rs.next()) {
            String nombre = rs.getString("NOMBRE");
            origen.addItem(nombre);
            destino.addItem(nombre);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

 
 private void agregarListeners() {
    origen.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            cargarLatLong("origen");
        }
    });

    destino.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            cargarLatLong("destino");
        }
    });
}


   
   private void cargarLatLong(String tipo) {
    JComboBox<String> comboBox = tipo.equals("origen") ? origen : destino;
    String seleccion = (String) comboBox.getSelectedItem();
    int index = comboBox.getSelectedIndex();
    if (seleccion != null || index != 0) {
        try (Connection con = Conexion.getConnection()) {
            String query = "SELECT CODIGO_UBICACION,LATITUD, LONGITUD FROM UBICACIONES WHERE NOMBRE = ?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, seleccion);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                String latitud = rs.getString("LATITUD");
                String longitud = rs.getString("LONGITUD");
                String cod_ubi = rs.getString("CODIGO_UBICACION");

                if (tipo.equals("origen")) {
                    codorigen.setText(cod_ubi);
                    latitudOrigen.setText(latitud);
                    longitudOrigen.setText(longitud);
                } else {
                    coddestino.setText(cod_ubi);                    
                    latitudDestino.setText(latitud);
                    longitudDestino.setText(longitud);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    } else{
        if (tipo.equals("origen")) {
            codorigen.setText("");
            latitudOrigen.setText("");
            longitudOrigen.setText("");
        } else {
            coddestino.setText("");                    
            latitudDestino.setText("");
            longitudDestino.setText("");
        }
    }
}




    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblViajes = new javax.swing.JTable();
        limpiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblOrigen = new javax.swing.JLabel();
        lblDestino = new javax.swing.JLabel();
        lblFecIni = new javax.swing.JLabel();
        lblOrigen1 = new javax.swing.JLabel();
        latitudOrigen = new javax.swing.JTextField();
        latitudDestino = new javax.swing.JTextField();
        lblOrigen2 = new javax.swing.JLabel();
        lblOrigen4 = new javax.swing.JLabel();
        longitudOrigen = new javax.swing.JTextField();
        lblOrigen5 = new javax.swing.JLabel();
        longitudDestino = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        txtCodigoViaje = new javax.swing.JTextField();
        lblOrigen6 = new javax.swing.JLabel();
        txtSolicitante = new javax.swing.JTextField();
        lblOrigen7 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        lblOrigen8 = new javax.swing.JLabel();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        lblFecFin1 = new javax.swing.JLabel();
        lblOrigen9 = new javax.swing.JLabel();
        precio = new javax.swing.JTextField();
        lblOrigen10 = new javax.swing.JLabel();
        txtDistancia = new javax.swing.JTextField();
        origen = new javax.swing.JComboBox<>();
        destino = new javax.swing.JComboBox<>();
        btnCancelarViaje = new javax.swing.JButton();
        soliViaje = new javax.swing.JButton();
        nameusuario = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        codorigen = new javax.swing.JTextField();
        lblOrigen3 = new javax.swing.JLabel();
        coddestino = new javax.swing.JTextField();
        lblOrigen11 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tblViajes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "ID", "Origen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblViajes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblViajesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblViajes);
        if (tblViajes.getColumnModel().getColumnCount() > 0) {
            tblViajes.getColumnModel().getColumn(0).setResizable(false);
            tblViajes.getColumnModel().getColumn(0).setPreferredWidth(5);
            tblViajes.getColumnModel().getColumn(1).setResizable(false);
        }

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gestión de viajes Usuario ");

        lblOrigen.setText("Origen");

        lblDestino.setText("Destino");

        lblFecIni.setText("Fecha de salida");

        lblOrigen1.setText("Latitud Origen");

        latitudOrigen.setEditable(false);
        latitudOrigen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        latitudOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latitudOrigenActionPerformed(evt);
            }
        });

        latitudDestino.setEditable(false);
        latitudDestino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        latitudDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latitudDestinoActionPerformed(evt);
            }
        });

        lblOrigen2.setText("Latitud Destino");

        lblOrigen4.setText("Longitud Origen");

        longitudOrigen.setEditable(false);
        longitudOrigen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        longitudOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longitudOrigenActionPerformed(evt);
            }
        });

        lblOrigen5.setText("Longitud Destino");

        longitudDestino.setEditable(false);
        longitudDestino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        longitudDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longitudDestinoActionPerformed(evt);
            }
        });

        jDateChooser1.setEnabled(false);

        jLabel3.setText("Estado");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        txtCodigoViaje.setEditable(false);
        txtCodigoViaje.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        txtCodigoViaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoViajeActionPerformed(evt);
            }
        });

        lblOrigen6.setText("Código de viaje");

        txtSolicitante.setEditable(false);
        txtSolicitante.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        txtSolicitante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSolicitanteActionPerformed(evt);
            }
        });

        lblOrigen7.setText("Código de solicitante");

        txtCliente.setEditable(false);
        txtCliente.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        txtCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteActionPerformed(evt);
            }
        });

        lblOrigen8.setText("Nit de cliente");

        jDateChooser3.setEnabled(false);

        lblFecFin1.setText("Fecha de solicitud");

        lblOrigen9.setText("Precio");

        precio.setEditable(false);
        precio.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        precio.setEnabled(false);
        precio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioActionPerformed(evt);
            }
        });

        lblOrigen10.setText("Distancia");

        txtDistancia.setEditable(false);
        txtDistancia.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        txtDistancia.setEnabled(false);
        txtDistancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDistanciaActionPerformed(evt);
            }
        });

        origen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                origenActionPerformed(evt);
            }
        });

        destino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinoActionPerformed(evt);
            }
        });

        btnCancelarViaje.setText("Cancelar");
        btnCancelarViaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarViajeActionPerformed(evt);
            }
        });

        soliViaje.setText("Solicitar Viaje");
        soliViaje.setEnabled(false);
        soliViaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soliViajeActionPerformed(evt);
            }
        });

        nameusuario.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        nameusuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Usuario: ");

        codorigen.setEditable(false);
        codorigen.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        codorigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codorigenActionPerformed(evt);
            }
        });

        lblOrigen3.setText("Codigo Origen");

        coddestino.setEditable(false);
        coddestino.setToolTipText("Ingrese aquí el nombre de la ubicación de origen.");
        coddestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coddestinoActionPerformed(evt);
            }
        });

        lblOrigen11.setText("Codigo Destino");
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOrigen7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrigen8, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCliente)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrigen6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCodigoViaje, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(latitudOrigen, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrigen1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codorigen, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrigen3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblOrigen, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(longitudOrigen)
                            .addComponent(lblOrigen4, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(origen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFecFin1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFecIni, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrigen10, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrigen9, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(latitudDestino)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblOrigen2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 31, Short.MAX_VALUE)))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(longitudDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblOrigen5, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(coddestino, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrigen11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1018, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameusuario, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(soliViaje, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelarViaje)
                        .addGap(18, 18, 18)
                        .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(415, 415, 415))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(226, 226, 226))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1080, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameusuario, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrigen11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(coddestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOrigen2)
                            .addComponent(lblOrigen5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(latitudDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(longitudDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblOrigen)
                                    .addComponent(lblDestino))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(origen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrigen3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(codorigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrigen4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(longitudOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrigen1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(latitudOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblOrigen7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblOrigen8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrigen6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigoViaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(limpiar)
                            .addComponent(btnCancelarViaje)
                            .addComponent(soliViaje))
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblFecFin1)
                                    .addComponent(lblFecIni))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblOrigen10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblOrigen9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        LimpiarCampos();
        inicializarBotones();
    }//GEN-LAST:event_limpiarActionPerformed

    private int id = 1;    
private void LimpiarCampos() {
    origen.setSelectedIndex(0);
    destino.setSelectedIndex(0);
    origen.requestFocus();
    destino.requestFocus();
    jDateChooser1.setDate(null);
    codorigen.setText("");
    coddestino.setText("");
    jDateChooser3.setDate(null);
    latitudOrigen.setText("");
    longitudOrigen.setText("");
    latitudDestino.setText("");
    longitudDestino.setText("");
    txtDistancia.setText("");
    txtCodigoViaje.setText("");
    jComboBox1.setSelectedIndex(0);
    precio.setText("");
    soliViaje.setEnabled(true);
    btnCancelarViaje.setEnabled(false);
    
    
}

    
    public void setUbicacion(boolean esOrigen, GeoPosition geoPosition) {
    if (esOrigen) {
        latitudOrigen.setText(String.valueOf(geoPosition.getLatitude()));
        longitudOrigen.setText(String.valueOf(geoPosition.getLongitude()));
    } else {
        latitudDestino.setText(String.valueOf(geoPosition.getLatitude()));
        longitudDestino.setText(String.valueOf(geoPosition.getLongitude()));
    }
    }
    
private boolean camposVacios() {
    if (origen.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(null, "El Campo Origen está vacío", "Verificar Campos", JOptionPane.ERROR_MESSAGE);
        origen.requestFocus();
        return true;
    } else if (destino.getSelectedItem() == null) {
        JOptionPane.showMessageDialog(null, "El Campo Destino está vacío", "Verificar Campos", JOptionPane.ERROR_MESSAGE);
        destino.requestFocus();
        return true;
    }
    return false;
}


    
    
private List<Viaje> getViajesFromTable() {
    List<Viaje> viajes = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) tblViajes.getModel();
    
    for (int i = 0; i < model.getRowCount(); i++) {
        Viaje viaje = new Viaje();
        viaje.setIdViaje((Integer) model.getValueAt(i, 0));
        viaje.setOrigen((String) model.getValueAt(i, 1));
        viaje.setDestino((String) model.getValueAt(i, 2));
        viaje.setEstado((String) model.getValueAt(i, 5));

        // Manejar fechas
        Object fechaSalidaObj = model.getValueAt(i, 3);
        Object fechaLlegadaObj = model.getValueAt(i, 4);
        if (fechaSalidaObj instanceof Date) {
            viaje.setFechaSalida((Date) fechaSalidaObj);
            System.out.println(viaje.getFechaSalida());
        }
        if (fechaLlegadaObj instanceof Date) {
            viaje.setFechaLlegada((Date) fechaLlegadaObj);
        }

        
        viajes.add(viaje);
    }
    
    return viajes;
}    




        public void refreshTable(String usuario) {
        // Configuración de las columnas de la tabla
        String[] columnNames = {"Cod. viaje", "Solicitante","Cliente","Vehiculo","Costo","Origen","Destino","Lat. Origen","Lon. Origen","Lat. Destino","Lon. Destino","Fecha de solicitud","Fecha de salida","Fecha de llegada","Distancia","Estado"};
        dtm = new DefaultTableModel(columnNames, 0); // Se inicializa el modelo de tabla
        tblViajes.setModel(dtm);  // Se asigna el modelo a la tabla

        // Consulta a DB
        try (Connection con = getConnection()) {  // getConnection() es tu método que devuelve la conexión a la DB
            String query = "SELECT CODIGO_VIAJE,USU.NOMBRE || ' ' || USU.APELLIDO AS SOLICITANTE, " +
            "CLI.NOMBRE AS CLIENTE,FK_PLACA,COSTO,ORI.NOMBRE AS ORIGEN,DES.NOMBRE AS DESTINO,DISTANCIA,FECHA_SALIDA,FECHA_LLEGADA,ESTADO,FECHA_REGISTRO, "+ 
            "ORI.LATITUD AS OLAT,ORI.LONGITUD AS OLON,DES.LATITUD AS DLAT,DES.LONGITUD AS DLON " +
            "FROM VIAJES " +
            "JOIN USUARIOS USU ON FK_CODIGO_USUARIO = USU.CODIGO_USUARIO " +
            "JOIN CLIENTES CLI ON FK_NIT = CLI.NIT " +
            "JOIN UBICACIONES ORI ON ORIGEN = ORI.CODIGO_UBICACION " +
            "JOIN UBICACIONES DES ON DESTINO = DES.CODIGO_UBICACION "
             + "WHERE FK_CODIGO_USUARIO = ?";
            
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, Integer.valueOf(usuario));
            ResultSet rs = ps.executeQuery();

            // Se recorre con un while el result del query
            while (rs.next()) {
                String codViaje = rs.getString("CODIGO_VIAJE");
                String solicitante = rs.getString("SOLICITANTE");
                String cliente = rs.getString("CLIENTE");
                String vehiculo = rs.getString("FK_PLACA");
                String costo = rs.getString("COSTO");
                String ori = rs.getString("ORIGEN");
                String des = rs.getString("DESTINO");
                String latO = rs.getString("OLAT");
                String lonO = rs.getString("OLON");
                String latD = rs.getString("DLAT");
                String lonD = rs.getString("DLON");
                String fsol = rs.getString("FECHA_REGISTRO");
                String fsalida = rs.getString("FECHA_SALIDA");
                String fllegada = rs.getString("FECHA_LLEGADA");                
                String dist = rs.getString("DISTANCIA");
                String est = rs.getString("ESTADO");
                switch (est){
                case "0":
                    est = "Rechazado";
                break;
                case "1":
                    est = "Solicitado";
                break;
                case "2":
                    est = "Aprobado";
                break;
                case "3":
                    est = "En proceso";
                break;
                case "4":
                    est = "Finalizado";
                break;
                }
                soliViaje.setEnabled(true);
                btnCancelarViaje.setEnabled(false);
                
                // Se cargan los datos del objeto a la tabla
                dtm.addRow(new Object[]{codViaje, solicitante,cliente,vehiculo,costo,ori,des,latO,lonO,latD,lonD,fsol,fsalida,fllegada,dist,est});
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        
        
        
    }
        
    private void latitudOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latitudOrigenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_latitudOrigenActionPerformed

    private void latitudDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latitudDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_latitudDestinoActionPerformed

    private void longitudOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longitudOrigenActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_longitudOrigenActionPerformed

    private void longitudDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longitudDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_longitudDestinoActionPerformed


    private void tblViajesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblViajesMouseClicked

    // Obtener la fila seleccionada
    int rowIndex = tblViajes.rowAtPoint(evt.getPoint());
    // Validar índice de fila
    if (rowIndex < 0) {
        return; // Salir si la fila seleccionada no es válida
    }
    // Obtener los valores de la fila
    String origenText = String.valueOf(tblViajes.getValueAt(rowIndex, 5));
    String destinoText = String.valueOf(tblViajes.getValueAt(rowIndex, 6));
    String estado = String.valueOf(tblViajes.getValueAt(rowIndex, 15));
    validarSituacion(estado);
    String latitudO = String.valueOf(tblViajes.getValueAt(rowIndex, 7));
    String longitudO = String.valueOf(tblViajes.getValueAt(rowIndex, 8));
    String latitudD = String.valueOf(tblViajes.getValueAt(rowIndex, 9));
    String longitudD = String.valueOf(tblViajes.getValueAt(rowIndex, 10));
    String dist = String.valueOf(tblViajes.getValueAt(rowIndex, 14));
    String prec = String.valueOf(tblViajes.getValueAt(rowIndex, 4));
    String vehiculo = String.valueOf(tblViajes.getValueAt(rowIndex, 3));
    //String cliente = String.valueOf(tblViajes.getValueAt(rowIndex, 2));
    //String solicitante = String.valueOf(tblViajes.getValueAt(rowIndex, 1));
    String codigoViaje = String.valueOf(tblViajes.getValueAt(rowIndex, 0));
    String fechaRegistro = String.valueOf(tblViajes.getValueAt(rowIndex, 11));
    String fechaLlegada = String.valueOf(tblViajes.getValueAt(rowIndex, 12));

    // Actualizar los JComboBox
    origen.setSelectedItem(origenText);
    destino.setSelectedItem(destinoText);
    
    // Actualizar campos de texto
    latitudOrigen.setText(latitudO);
    longitudOrigen.setText(longitudO);
    latitudDestino.setText(latitudD);
    longitudDestino.setText(longitudD);
//    txtDistancia.setText(dist);
//    txtCliente.setText(cliente);
//    txtSolicitante.setText(solicitante)
    txtDistancia.setText(dist);
    precio.setText(prec);
    txtCodigoViaje.setText(codigoViaje);

    // Actualizar JComboBox estado
    updateComboBox(estado);
    
    // Configurar formato de fecha
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", java.util.Locale.ENGLISH);

    // Parsear fechas y actualizar JDateChooser
    updateDateChooser(jDateChooser3, fechaRegistro, formatter);
    updateDateChooser(jDateChooser1, fechaLlegada, formatter);    
        
        
    }//GEN-LAST:event_tblViajesMouseClicked

    private void updateDateChooser(JDateChooser dateChooser, String dateString, SimpleDateFormat formatter) {
    try {
        Date date = formatter.parse(dateString);
        dateChooser.setDate(date);
    } catch (ParseException e) {
        System.out.println("Error al analizar la fecha: " + e.getMessage());
    }
}
    // Método auxiliar para actualizar el JComboBox
    private void updateComboBox(String estado) {
    ComboBoxModel<String> status = jComboBox1.getModel();
    for (int i = 0; i < status.getSize(); i++) {
        if (status.getElementAt(i).equals(estado)) {
            jComboBox1.setSelectedIndex(i);
            break;
        }
    }
}

    private void validarSituacion(String estado){
        switch (estado){
            case "Rechazado":
                btnCancelarViaje.setEnabled(false);
                soliViaje.setEnabled(false);
                break;
            case "Solicitado":
                btnCancelarViaje.setEnabled(true);
                soliViaje.setEnabled(false);
                break;
            case "Aprobado":
                btnCancelarViaje.setEnabled(false);
                soliViaje.setEnabled(false);
                break;
            case "En proceso":
                btnCancelarViaje.setEnabled(false);
                soliViaje.setEnabled(false);
                break;
            case "Finalizado":
                btnCancelarViaje.setEnabled(false);
                soliViaje.setEnabled(false);
                break;
            default:
                JOptionPane.showMessageDialog(null, "Estado incorrecto, verifique la DB.");
                break;
        }
    }

private void cancelarViaje() {
    int rowIndex = tblViajes.getSelectedRow();
    if (rowIndex < 0) {
        JOptionPane.showMessageDialog(null, "Seleccione un viaje para cancelar.");
        return;
    }

    String codigoViaje = String.valueOf(tblViajes.getValueAt(rowIndex, 0));
    String estado = String.valueOf(tblViajes.getValueAt(rowIndex, 11));

    if ("Finalizado".equalsIgnoreCase(estado)) {
        JOptionPane.showMessageDialog(null, "No se puede cancelar un viaje finalizado.");
        return;
    }

    try (Connection con = Conexion.getConnection()) {
        String query = "UPDATE VIAJES SET ESTADO = 'Cancelado' WHERE CODIGO_VIAJE = ?";
        PreparedStatement ps = con.prepareStatement(query);
        ps.setString(1, codigoViaje);
        int rowsAffected = ps.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "El viaje ha sido cancelado.");
            //refreshTable(); // Actualiza la tabla para reflejar el cambio
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo cancelar el viaje.");
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

    
    
    
    
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void txtCodigoViajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoViajeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoViajeActionPerformed

    private void txtSolicitanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSolicitanteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSolicitanteActionPerformed

    private void txtClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteActionPerformed

    private void precioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precioActionPerformed

    private void txtDistanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDistanciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDistanciaActionPerformed

    private void destinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destinoActionPerformed

    private void origenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_origenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_origenActionPerformed

    private void btnCancelarViajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarViajeActionPerformed
        /*
    btnCancelarViaje = new JButton("Cancelar Viaje");
    btnCancelarViaje.setEnabled(false); 
    btnCancelarViaje.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            cancelarViaje();
        }

        private void cancelarViaje() {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }
    });

    // Añadir el botón a tu layout
    add(btnCancelarViaje, BorderLayout.SOUTH);*/

        
        opciones.denegar(Integer.valueOf(txtCodigoViaje.getText()));
        refreshTable(txtSolicitante.getText());
        LimpiarCampos();
    }//GEN-LAST:event_btnCancelarViajeActionPerformed

    private void soliViajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soliViajeActionPerformed
        // TODO add your handling code here:
        String soli = txtSolicitante.getText();
        String ori = codorigen.getText();
        String dest = coddestino.getText();
        opciones.solicitarViaje(soli, ori, dest);
        refreshTable(soli);
        LimpiarCampos();
    }//GEN-LAST:event_soliViajeActionPerformed

    private void codorigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codorigenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codorigenActionPerformed

    private void coddestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coddestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coddestinoActionPerformed
        

    
    
    private void updateMap(GeoPosition origen, GeoPosition destino) {
    // Limpiar y actualizar waypoints
    waypointsOrigen.clear();
    waypointsDestino.clear();
    waypointsOrigen.add(new DefaultWaypoint(origen));
    waypointsDestino.add(new DefaultWaypoint(destino));

    // Configurar pintores
    ColoredWaypointRenderer origenRenderer = new ColoredWaypointRenderer(Color.RED);
    ColoredWaypointRenderer destinoRenderer = new ColoredWaypointRenderer(Color.BLUE);
    waypointPainterOrigen.setWaypoints(waypointsOrigen);
    waypointPainterOrigen.setRenderer(origenRenderer);
    waypointPainterDestino.setWaypoints(waypointsDestino);
    waypointPainterDestino.setRenderer(destinoRenderer);

    // Configurar PolylinePainter
    polylinePainter.setWaypoints(List.of(origen, destino));
    polylinePainter.setLineColor(Color.GREEN);
    polylinePainter.setLineWidth(3);

    // Crear CompositePainter y asignar al mapa
    CompositePainter<JXMapViewer> compositePainter = new CompositePainter<>(List.of(
        waypointPainterOrigen,
        waypointPainterDestino,
        polylinePainter
    ));
    mapViewer.setOverlayPainter(compositePainter);

    // Calcular y ajustar el punto medio y el zoom
    double midLatitude = (origen.getLatitude() + destino.getLatitude()) / 2;
    double midLongitude = (origen.getLongitude() + destino.getLongitude()) / 2;
    GeoPosition midpoint = new GeoPosition(midLatitude, midLongitude);
    System.out.println("Mid"+midpoint);
    mapViewer.setAddressLocation(midpoint);

    double maxLat = Math.max(origen.getLatitude(), destino.getLatitude());
    double minLat = Math.min(origen.getLatitude(), destino.getLatitude());
    double maxLon = Math.max(origen.getLongitude(), destino.getLongitude());
    double minLon = Math.min(origen.getLongitude(), destino.getLongitude());

    double latDiff = maxLat - minLat;
    double lonDiff = maxLon - minLon;
    int zoom = calcularZoom(latDiff, lonDiff);
    mapViewer.setZoom(zoom);

    // Deshabilitar interacciones del usuario
//    disableUserInteractions();

    // Asegúrate de repintar el mapa
    mapViewer.repaint();
}

    
    private int calcularZoom(double latDiff, double lonDiff) {
        // Determinar el nivel de zoom basado en la diferencia en grados
        if (latDiff > 5 || lonDiff > 5) {
            return 10; // Zoom bajo para distancias mayores
        } else if (latDiff > 2 || lonDiff > 2) {
            return 7; // Zoom medio para distancias intermedias
        } else {
            return 4; // Zoom alto para distancias menores
        }
    }
    

    
    /*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteVista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 Login princ = new Login();
                 princ.setVisible(true);
                 princ.setLocationRelativeTo(null);
                
        
        
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarViaje;
    private javax.swing.JTextField coddestino;
    private javax.swing.JTextField codorigen;
    private javax.swing.JComboBox<String> destino;
    private javax.swing.JComboBox jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField latitudDestino;
    private javax.swing.JTextField latitudOrigen;
    private javax.swing.JLabel lblDestino;
    private javax.swing.JLabel lblFecFin1;
    private javax.swing.JLabel lblFecIni;
    private javax.swing.JLabel lblOrigen;
    private javax.swing.JLabel lblOrigen1;
    private javax.swing.JLabel lblOrigen10;
    private javax.swing.JLabel lblOrigen11;
    private javax.swing.JLabel lblOrigen2;
    private javax.swing.JLabel lblOrigen3;
    private javax.swing.JLabel lblOrigen4;
    private javax.swing.JLabel lblOrigen5;
    private javax.swing.JLabel lblOrigen6;
    private javax.swing.JLabel lblOrigen7;
    private javax.swing.JLabel lblOrigen8;
    private javax.swing.JLabel lblOrigen9;
    private javax.swing.JButton limpiar;
    private javax.swing.JTextField longitudDestino;
    private javax.swing.JTextField longitudOrigen;
    private javax.swing.JLabel nameusuario;
    private javax.swing.JComboBox<String> origen;
    private javax.swing.JTextField precio;
    private javax.swing.JButton soliViaje;
    private javax.swing.JTable tblViajes;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCodigoViaje;
    private javax.swing.JTextField txtDistancia;
    private javax.swing.JTextField txtSolicitante;
    // End of variables declaration//GEN-END:variables
}
